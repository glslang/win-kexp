# WIN-KEXP

Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.

## Project Description

This project is a Windows kernel exploit development framework. It provides a set of tools and libraries for developing and testing Windows kernel exploits.

## Tech Stack

- Rust
- Assembly using MASM syntax

## Assembly Programming
- Use MASM syntax for assembly programming on X86_64 architecture.
- Use ARMASM syntax for assembly programming on ARM64 architecture.
- Use MASM directives for defining sections, equates, and macros.

## Rust
- Write clear, concise, and idiomatic Rust code with accurate examples.
- Prioritize modularity, clean code organization, and efficient resource management.
- Use expressive variable names that convey intent (e.g., `is_ready`, `has_data`).
- Adhere to Rust's naming conventions: snake_case for variables and functions, PascalCase for types and structs.
- Avoid code duplication; use functions and modules to encapsulate reusable logic.
- Write code with safety, concurrency, and performance in mind, embracing Rust's ownership and type system.

## Error Handling
- Embrace Rust's Result and Option types for error handling.
- Implement custom error types using `thiserror` for more descriptive errors.
- Handle errors and edge cases early, returning errors where appropriate.

## Windows Kernel Programming
- Use Windows API functions and structures for kernel programming.
- Use windows-rs crate for Windows API bindings.
- Use @Web https://microsoft.github.io/windows-docs-rs/doc/windows/ for Windows API documentation.
- When using windows-rs, use the `windows` module for Windows API bindings.
- When using windows-rs, declare the relevant functions and structures and add the necessary imports.

## Git Usage

### Commit Message Prefixes:

- "fix:" for bug fixes
- "feat:" for new features
- "perf:" for performance improvements
- "docs:" for documentation changes
- "style:" for formatting changes
- "refactor:" for code refactoring
- "test:" for adding missing tests
- "chore:" for maintenance tasks

### Rules:

- Use lowercase for commit messages
- Keep the summary line concise
- Include description for non-obvious changes
- Reference issue numbers when applicable

