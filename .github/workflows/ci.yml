# Cargo CI workflow to build and test

name: Cargo CI Build & Test

on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, windows-11-arm]
        toolchain:
          - stable
    steps:
      - uses: actions/checkout@v4
      - uses: microsoft/setup-msbuild@v1.1
      - uses: glslang/setup-masm@v1.1
        with:
          vs-architecture: ${{ matrix.os == 'windows-11-arm' && 'arm64' || 'x64' }}
      - name: Install Rust
        run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}
      - name: Cargo fmt
        run: |
          rustup component add rustfmt
          cargo fmt --all -- --check
      - name: Cargo update
        run: cargo update
      - name: Build
        run: |
          echo "=== Starting Rust build ==="
          cargo build --verbose 2>&1 | tee build_output.log
          echo "=== Build completed ==="
          echo "=== Build output log ==="
          cat build_output.log
      - name: Check target/debug output
        run: |
          Write-Host "=== Checking for stderr and output files in target/debug/build ==="
          if (Test-Path "target/debug/build") {
            Write-Host "target/debug/build directory exists"

            # Check for stderr and output files in all subdirectories
            $outputFiles = Get-ChildItem -Path "target/debug/build" -Recurse -File | Where-Object { $_.Name -eq "stderr" -or $_.Name -eq "output" }

            if ($outputFiles) {
              Write-Host "=== Found stderr and output files ==="
              foreach ($file in $outputFiles) {
                Write-Host "=== Contents of $($file.FullName) ==="
                try {
                  Get-Content $file.FullName
                } catch {
                  Write-Host "Could not read $($file.FullName)"
                }
              }
            } else {
              Write-Host "No stderr or output files found in target/debug/build"
            }
          } else {
            Write-Host "target/debug/build directory does not exist"
          }
      - name: Test
        run: cargo test --verbose
